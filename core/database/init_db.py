#!/usr/bin/env python3
"""
MIFTAH - Initialisation base de donn√©es
Script d'initialisation et de peuplement initial
"""

import os
import sys
from pathlib import Path
import logging

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent.parent.parent))

from core.database.models import DatabaseManager
from config import get_config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_database():
    """Initialise la base de donn√©es avec les donn√©es par d√©faut"""
    
    config = get_config()
    db_config = config['database']
    
    # Cr√©er le gestionnaire de base de donn√©es
    db = DatabaseManager(
        db_path=str(db_config.DB_PATH),
        db_key=db_config.DB_KEY
    )
    
    logger.info("üîê Initialisation base de donn√©es SQLCipher")
    
    # Cr√©er l'utilisateur administrateur par d√©faut
    if db.create_user(
        username='admin',
        password='sparta2025',
        email='admin@miftah.local',
        role='administrator'
    ):
        logger.info("‚úÖ Utilisateur admin cr√©√©")
    else:
        logger.info("‚ÑπÔ∏è  Utilisateur admin existe d√©j√†")
    
    # Initialiser les modules SPARTA
    modules = [
        ('OMEGA', 'standby', '1.0.0'),
        ('ATLAS', 'standby', '1.0.0'),
        ('PROLITAGE', 'standby', '1.0.0'),
        ('MIFTAH', 'active', '1.0.0')
    ]
    
    for module_name, status, version in modules:
        config_data = {
            'enabled': True,
            'auto_start': False,
            'debug_mode': False
        }
        
        if db.update_module_status(
            module_name=module_name,
            status=status,
            version=version,
            config=config_data
        ):
            logger.info(f"‚úÖ Module {module_name} initialis√©")
    
    # Enregistrer des agents de test
    test_agents = [
        ('AGT-001', 'Phoenix', 'reconnaissance', 'Paris, FR', '192.168.1.100'),
        ('AGT-002', 'Cipher', 'infiltration', 'London, UK', '192.168.1.101'),
        ('AGT-003', 'Ghost', 'surveillance', 'Berlin, DE', '192.168.1.102')
    ]
    
    for agent_id, name, agent_type, location, ip in test_agents:
        if db.register_agent(agent_id, name, agent_type, location, ip):
            logger.info(f"‚úÖ Agent {agent_id} enregistr√©")
    
    # Logs de s√©curit√© initiaux
    initial_logs = [
        ('INFO', 'SYSTEM', 'startup', 'Syst√®me MIFTAH initialis√©'),
        ('INFO', 'AUTH', 'user_created', 'Utilisateur administrateur cr√©√©'),
        ('INFO', 'MODULE', 'status_update', 'Modules SPARTA initialis√©s'),
        ('SUCCESS', 'DATABASE', 'init', 'Base de donn√©es SQLCipher configur√©e')
    ]
    
    for level, module, event_type, message in initial_logs:
        db.log_security_event(
            level=level,
            module=module,
            event_type=event_type,
            message=message,
            details={'source': 'init_script', 'version': '1.0.0'}
        )
    
    logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
    
    # Test de chiffrement
    logger.info("üîê Test du chiffrement...")
    test_data = "Donn√©es sensibles SPARTA"
    encrypted = db._encrypt_data(test_data)
    decrypted = db._decrypt_data(encrypted)
    
    if decrypted == test_data:
        logger.info("‚úÖ Chiffrement/d√©chiffrement fonctionnel")
    else:
        logger.error("‚ùå Erreur chiffrement/d√©chiffrement")
    
    return db

def main():
    """Point d'entr√©e principal"""
    try:
        db = init_database()
        
        # Afficher quelques statistiques
        users = db.get_connection().execute("SELECT COUNT(*) as count FROM users").fetchone()
        agents = db.get_connection().execute("SELECT COUNT(*) as count FROM agents").fetchone()
        modules = db.get_connection().execute("SELECT COUNT(*) as count FROM module_status").fetchone()
        logs = db.get_connection().execute("SELECT COUNT(*) as count FROM security_logs").fetchone()
        
        print("\nüìä Statistiques base de donn√©es:")
        print(f"   üë• Utilisateurs: {users['count']}")
        print(f"   ü§ñ Agents: {agents['count']}")
        print(f"   üì¶ Modules: {modules['count']}")
        print(f"   üìù Logs: {logs['count']}")
        
        print(f"\nüõ°Ô∏è  Base de donn√©es MIFTAH pr√™te!")
        print(f"   üìÅ Fichier: {db.db_path}")
        print(f"   üîê Chiffrement: SQLCipher + AES-256")
        
    except Exception as e:
        logger.error(f"Erreur initialisation: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()